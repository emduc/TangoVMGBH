#!/usr/bin/env python
# -*- coding:utf-8 -*-


# ############################################################################
#  license :
# ============================================================================
#
#  File :        GrowthModule.py
#
#  Project :     GrowBotHub
#
# This file is part of Tango device class.
# 
# Tango is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# Tango is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Tango.  If not, see <http://www.gnu.org/licenses/>.
# 
#
#  $Author :      niels.lachat$
#
#  $Revision :    $
#
#  $Date :        $
#
#  $HeadUrl :     $
# ============================================================================
#            This file is generated by POGO
#     (Program Obviously used to Generate tango Object)
# ############################################################################

__all__ = ["GrowthModule", "GrowthModuleClass", "main"]

__docformat__ = 'restructuredtext'

import PyTango
import sys
# Add additional import
# ----- PROTECTED REGION ID(GrowthModule.additionnal_import) ENABLED START -----#
import socket  # To connect to microcontroller on GM
import time
from typing import List


# ----- PROTECTED REGION END -----#	//	GrowthModule.additionnal_import

# Device States Description
# STANDBY : The Growth Module is Idle and ready to take measurements.
# RUNNING : Taking measurements.
# MOVING : The GM is in movement (but controller is off). TODO think about this
# OPEN : The GM is being refilled at the Robotic Station.
# EXTRACT : The Growth Module is being harvested at the Robotic Station.
# FAULT : A major fault has occured, cannot be recovered from automatically. \n// TODO review this


class GrowthModule (PyTango.Device_4Impl):
    """The Growth Module is responsible for growing the vegetables.
    
    This device class runs on the Top-Level Controller and communicates
    with each Growth Module via a custom protocol. This is required
    because a tango device server requires an operating system to run
    and the Growth Modules use microcontrollers."""
    
    # -------- Add you global variables here --------------------------
    # ----- PROTECTED REGION ID(GrowthModule.global_variables) ENABLED START -----#
    COMM_TCP_PORT = 8503
    COMM_BUFFER_SIZE = 4096  # see Note at https://docs.python.org/3/library/socket.html#socket.socket.recv
    COMM_ENCODING = 'utf-8'
    COMM_DELAY_BETWEEN_CONN_ATTEMPTS = 1.0
    COMM_MAX_RESPONSE_TIME = 1.0
    COMM_RESPONSE_POLL_DELAY = 0.1
    COMM_MSG_SEPARATOR = ';;'  # see comm_proto.md document
    COMM_FIELD_SEPARATOR = ';'

    # ----- PROTECTED REGION END -----#	//	GrowthModule.global_variables

    def __init__(self, cl, name):
        PyTango.Device_4Impl.__init__(self,cl,name)
        self.debug_stream("In __init__()")
        GrowthModule.init_device(self)
        # ----- PROTECTED REGION ID(GrowthModule.__init__) ENABLED START -----#

        # ----- PROTECTED REGION END -----#	//	GrowthModule.__init__
        
    def delete_device(self):
        self.debug_stream("In delete_device()")
        # ----- PROTECTED REGION ID(GrowthModule.delete_device) ENABLED START -----#
        self.controller_socket.close()  # close the connection
        # ----- PROTECTED REGION END -----#	//	GrowthModule.delete_device

    def init_device(self):
        self.debug_stream("In init_device()")
        self.get_device_properties(self.get_device_class())
        self.attr_temperature_read = 0.0
        self.attr_pH_read = 0.0
        self.attr_waterLevel_read = 0.0
        self.attr_electroconductivity_read = 0.0
        self.attr_pumpState_read = False
        self.attr_LEDStates_read = [False]
        self.attr_plantStates_read = [0]
        self.attr_plantTypes_read = [0]
        # ----- PROTECTED REGION ID(GrowthModule.init_device) ENABLED START -----#
        self.controller_socket: socket.socket = self.try_connecting_to_controller()
        # ----- PROTECTED REGION END -----#	//	GrowthModule.init_device

    def always_executed_hook(self):
        self.debug_stream("In always_excuted_hook()")
        # ----- PROTECTED REGION ID(GrowthModule.always_executed_hook) ENABLED START -----#

        # ----- PROTECTED REGION END -----#	//	GrowthModule.always_executed_hook

    # -------------------------------------------------------------------------
    #    GrowthModule read/write attribute methods
    # -------------------------------------------------------------------------
    
    def read_temperature(self, attr):
        self.debug_stream("In read_temperature()")
        # ----- PROTECTED REGION ID(GrowthModule.temperature_read) ENABLED START -----#
        values = self.send_atr_read('temperature')
        if len(values) == 1:
            self.attr_temperature_read = float(values[0])
        attr.set_value(self.attr_temperature_read)

        # ----- PROTECTED REGION END -----#	//	GrowthModule.temperature_read
        
    def read_pH(self, attr):
        self.debug_stream("In read_pH()")
        # ----- PROTECTED REGION ID(GrowthModule.pH_read) ENABLED START -----#
        values = self.send_atr_read('pH')
        if len(values) == 1:
            self.attr_pH_read = float(values[0])
        attr.set_value(self.attr_pH_read)

        # ----- PROTECTED REGION END -----#	//	GrowthModule.pH_read
        
    def read_waterLevel(self, attr):
        self.debug_stream("In read_waterLevel()")
        # ----- PROTECTED REGION ID(GrowthModule.waterLevel_read) ENABLED START -----#
        values = self.send_atr_read('waterLevel')
        if len(values) == 1:
            self.attr_waterLevel_read = float(values[0])
        attr.set_value(self.attr_waterLevel_read)

        # ----- PROTECTED REGION END -----#	//	GrowthModule.waterLevel_read
        
    def read_electroconductivity(self, attr):
        self.debug_stream("In read_electroconductivity()")
        # ----- PROTECTED REGION ID(GrowthModule.electroconductivity_read) ENABLED START -----#
        values = self.send_atr_read('electroconductivity')
        if len(values) == 1:
            self.attr_waterLevel_read = float(values[0])
        attr.set_value(self.attr_electroconductivity_read)

        # ----- PROTECTED REGION END -----#	//	GrowthModule.electroconductivity_read
        
    def read_pumpState(self, attr):
        self.debug_stream("In read_pumpState()")
        # ----- PROTECTED REGION ID(GrowthModule.pumpState_read) ENABLED START -----#
        values = self.send_atr_read('pumpState')
        if len(values) == 1:
            self.attr_pumpState_read = self.decode_bool(values[0])
        attr.set_value(self.attr_pumpState_read)

        # ----- PROTECTED REGION END -----#	//	GrowthModule.pumpState_read
        
    def write_pumpState(self, attr):
        self.debug_stream("In write_pumpState()")
        data = attr.get_write_value()
        # ----- PROTECTED REGION ID(GrowthModule.pumpState_write) ENABLED START -----#
        write_success = self.send_atr_write('pumpState', encoded_atr_values=[self.encode_bool(data)])
        if not write_success:
            self.error_stream(f'FAILED to write pumpState to controller {self.controller_ip}')
        # ----- PROTECTED REGION END -----#	//	GrowthModule.pumpState_write
        
    def read_LEDStates(self, attr):
        self.debug_stream("In read_LEDStates()")
        # ----- PROTECTED REGION ID(GrowthModule.LEDStates_read) ENABLED START -----#
        values = self.send_atr_read('LEDStates')
        if len(values) == 4:
            self.attr_pumpState_read = list(map(self.decode_bool, values))
        attr.set_value(self.attr_LEDStates_read)
        # ----- PROTECTED REGION END -----#	//	GrowthModule.LEDStates_read
        
    def write_LEDStates(self, attr):
        self.debug_stream("In write_LEDStates()")
        data = attr.get_write_value()
        # ----- PROTECTED REGION ID(GrowthModule.LEDStates_write) ENABLED START -----#
        self.send_atr_write('LEDStates', list(map(self.encode_bool, data)))
        # ----- PROTECTED REGION END -----#	//	GrowthModule.LEDStates_write
        
    def read_plantStates(self, attr):
        self.debug_stream("In read_plantStates()")
        # ----- PROTECTED REGION ID(GrowthModule.plantStates_read) ENABLED START -----#
        values = self.send_atr_read('plantStates')
        if len(values) == 5:
            self.attr_plantStates_read = list(map(int, values))
        attr.set_value(self.attr_plantStates_read)
        # ----- PROTECTED REGION END -----#	//	GrowthModule.plantStates_read
        
    def write_plantStates(self, attr):
        self.debug_stream("In write_plantStates()")
        data = attr.get_write_value()
        # ----- PROTECTED REGION ID(GrowthModule.plantStates_write) ENABLED START -----#
        self.send_atr_write('plantStates', list(map(str, data)))
        # ----- PROTECTED REGION END -----#	//	GrowthModule.plantStates_write
        
    def read_plantTypes(self, attr):
        self.debug_stream("In read_plantTypes()")
        # ----- PROTECTED REGION ID(GrowthModule.plantTypes_read) ENABLED START -----#
        values = self.send_atr_read('plantTypes')
        if len(values) == 5:
            self.attr_plantTypes_read = list(map(int, values))
        attr.set_value(self.attr_plantTypes_read)
        # ----- PROTECTED REGION END -----#	//	GrowthModule.plantTypes_read
        
    def write_plantTypes(self, attr):
        self.debug_stream("In write_plantTypes()")
        data = attr.get_write_value()
        # ----- PROTECTED REGION ID(GrowthModule.plantTypes_write) ENABLED START -----#
        self.send_atr_write('plantTypes', list(map(str, data)))
        # ----- PROTECTED REGION END -----#	//	GrowthModule.plantTypes_write
        
    
    
            
    def read_attr_hardware(self, data):
        self.debug_stream("In read_attr_hardware()")
        # ----- PROTECTED REGION ID(GrowthModule.read_attr_hardware) ENABLED START -----#

        # ----- PROTECTED REGION END -----#	//	GrowthModule.read_attr_hardware


    # -------------------------------------------------------------------------
    #    GrowthModule command methods
    # -------------------------------------------------------------------------
    
    def SwitchLightOn(self, argin):
        """ Turns a given light on
        :param argin: 
        :type argin: PyTango.DevShort
        """
        self.debug_stream("In SwitchLightOn()")
        #----- PROTECTED REGION ID(GrowthModule.SwitchLightOn) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	GrowthModule.SwitchLightOn
        
    def WaterPlants(self, argin):
        """ Turns on the pump for a given amount of time
        :param argin: 
        :type argin: PyTango.DevShort
        """
        self.debug_stream("In WaterPlants()")
        #----- PROTECTED REGION ID(GrowthModule.WaterPlants) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	GrowthModule.WaterPlants
        
    def RetrieveOverallState(self):
        """ Sends back all metrics
        """
        self.debug_stream("In RetrieveOverallState()")
        #----- PROTECTED REGION ID(GrowthModule.RetrieveOverallState) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	GrowthModule.RetrieveOverallState
        

    # ----- PROTECTED REGION ID(GrowthModule.programmer_methods) ENABLED START -----#
    def try_connecting_to_controller(self) -> socket.socket:
        """
        Try connecting to the controller of the GrowthModule. As long as the connection fails, the method attempts to
        reconnect.
        :return: The newly created socket that is connected to the controller.
        """
        self.debug_stream(f"Attempting (re)connection to {self.controller_ip}...")
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        connected = False
        while not connected:
            try:
                s.connect((self.controller_ip, self.COMM_TCP_PORT))
            except ConnectionRefusedError:
                self.debug_stream(f"Connection to server {self.controller_ip} was refused!")
                time.sleep(self.COMM_DELAY_BETWEEN_CONN_ATTEMPTS)  # so we don't spam the connection attempts
            else:
                connected = True
                self.debug_stream(f"Successful connection to {self.controller_ip}!")
        return s

    def try_sending_message(self, msg: str) -> str:
        """
        Tries sending msg to the controller and waits for the response to arrive. If the controller is disconnected,
        attempts to reconnect and then send msg.
        :param msg: The message to be sent to the controller, WITHOUT the ;; at the end.
        :return: The response from the controller, WITHOUT the ;; at the end. If the controller didn't respond fast
        enough, the return value is an empty string, aka ""
        """
        msg_with_sep = msg + self.COMM_MSG_SEPARATOR
        sent_successfully = False
        # as long as the message is not sent, we retry
        # this bruteforce approach might be a bit hardcore, but its the simplest for now
        while not sent_successfully:
            try:
                self.controller_socket.send(msg_with_sep.encode(self.COMM_ENCODING))
                sent_successfully = True
            except BrokenPipeError as bpe:
                self.debug_stream(f"{self.controller_ip} failed to send message due to: {bpe}")
                self.controller_socket.close()
                self.controller_socket = self.try_connecting_to_controller()
        responses_buff = ""
        responses = []
        waited_for = 0.0  # wait time, in case of a disconnection of the server
        while len(responses) <= 1 and waited_for <= self.COMM_MAX_RESPONSE_TIME:
            data = self.controller_socket.recv(self.COMM_BUFFER_SIZE)
            responses_buff += data.decode(self.COMM_ENCODING)
            responses = responses_buff.split(self.COMM_MSG_SEPARATOR)
            time.sleep(self.COMM_RESPONSE_POLL_DELAY)
            waited_for += self.COMM_RESPONSE_POLL_DELAY
        if waited_for > self.COMM_MAX_RESPONSE_TIME:
            self.controller_socket.close()
            self.controller_socket = self.try_connecting_to_controller()
            self.error_stream(f'Failed to receive response from controller {self.controller_ip} for message {msg}')
            return '' # Return an empty string in case of failure
        else:
            return responses[0]

    def send_atr_read(self, atr_name: str) -> List[str]:
        """
        Send an atr_read message to the controller.
        :param atr_name: Name of the attribute to read, eg 'temperature'
        :return: The list of attribute values returned by the controller, or an empty list if there was no response.
        """
        response = self.try_sending_message('atr_read;' + atr_name)
        if len(response) == 0:
            return []
        fields = response.split(self.COMM_FIELD_SEPARATOR)
        assert fields[0] == 'atr_res', 'Expected atr_res to be first field of response'
        assert fields[1] == atr_name, f'Expected {atr_name} to be the second field of response'
        return fields[2:]

    def send_atr_write(self, atr_name: str, encoded_atr_values: List[str]) -> bool:
        """
        Send an atr_write message to the controller.
        :param atr_name: Name of the attribute to write, eg 'pumpState'
        :param encoded_atr_values: List of value(s) to write, eg ['T'] for a write to pumpState
        :return: a bool indicating whether the write was successful or not (True means successful)
        """
        message = self.COMM_FIELD_SEPARATOR.join(('atr_write', atr_name, *encoded_atr_values))
        response = self.try_sending_message(message)
        if len(response) == 0:
            return False
        fields = response.split(self.COMM_FIELD_SEPARATOR)
        assert len(fields) == 3, f'Expected exactly 3 fields in a response to a write, got {len(fields)}'
        assert fields[0] == 'atr_res', 'Expected atr_res to be first field of response'
        assert fields[1] == atr_name, f'Expected {atr_name} to be the second field of response'
        confirmation = self.decode_bool(fields[2])
        if not confirmation:
            self.error_stream(f'The write of {self.controller_ip}:{atr_name} FAILED')
        return confirmation

    def encode_bool(self, value: bool) -> str:
        if value:
            return 'T'
        else:
            return 'F'

    def decode_bool(self, encoded: str) -> bool:
        if encoded == 'T':
            return True
        else:
            return False

    # ----- PROTECTED REGION END -----#	//	GrowthModule.programmer_methods

class GrowthModuleClass(PyTango.DeviceClass):
    # -------- Add you global class variables here --------------------------
    # ----- PROTECTED REGION ID(GrowthModule.global_class_variables) ENABLED START -----#

    # ----- PROTECTED REGION END -----#	//	GrowthModule.global_class_variables


    #    Class Properties
    class_property_list = {
        }


    #    Device Properties
    device_property_list = {
        'controller_ip':
            [PyTango.DevString, 
            "IP address of the microcontroller, in the form of a string.\nFor example : ``172.30.1.21``",
            ["172.30.1.21"] ],
        }


    #    Command definitions
    cmd_list = {
        'SwitchLightOn':
            [[PyTango.DevShort, "none"],
            [PyTango.DevVoid, "none"]],
        'WaterPlants':
            [[PyTango.DevShort, "none"],
            [PyTango.DevVoid, "none"]],
        'RetrieveOverallState':
            [[PyTango.DevVoid, "none"],
            [PyTango.DevVoid, "none"]],
        }


    #    Attribute definitions
    attr_list = {
        'temperature':
            [[PyTango.DevFloat,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'unit': "Celsius",
                'max value': "100",
                'min value': "0",
                'max alarm': "25",
                'min alarm': "15",
            } ],
        'pH':
            [[PyTango.DevFloat,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'unit': "pH",
                'description': "// TODO put warning and alarm values",
            } ],
        'waterLevel':
            [[PyTango.DevFloat,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'unit': "percentage",
                'description': "Represents the approximate percentage of the water level in the Growth Module.\n\n// TODO set alarm and warning values",
            } ],
        'electroconductivity':
            [[PyTango.DevFloat,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'unit': "mS*cm^-1",
            } ],
        'pumpState':
            [[PyTango.DevBoolean,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'description': "True means the pump is on, False means the pump is off.",
            } ],
        'LEDStates':
            [[PyTango.DevBoolean,
            PyTango.SPECTRUM,
            PyTango.READ_WRITE, 4]],
        'plantStates':
            [[PyTango.DevUShort,
            PyTango.SPECTRUM,
            PyTango.READ_WRITE, 5],
            {
                'description': "Encoding:\n- 0 = SEEDLING\n- 1 = VEGETATIVE_GROWTH\n- 2 = FLOWERING\n- 3 = DEVELOPMENT",
            } ],
        'plantTypes':
            [[PyTango.DevUShort,
            PyTango.SPECTRUM,
            PyTango.READ_WRITE, 5],
            {
                'description': "// TODO encoding",
            } ],
        }


def main():
    try:
        py = PyTango.Util(sys.argv)
        py.add_class(GrowthModuleClass, GrowthModule, 'GrowthModule')
        # ----- PROTECTED REGION ID(GrowthModule.add_classes) ENABLED START -----#

        # ----- PROTECTED REGION END -----#	//	GrowthModule.add_classes

        U = PyTango.Util.instance()
        U.server_init()
        U.server_run()

    except PyTango.DevFailed as e:
        print ('-------> Received a DevFailed exception:', e)
    except Exception as e:
        print ('-------> An unforeseen exception occured....', e)

if __name__ == '__main__':
    main()
